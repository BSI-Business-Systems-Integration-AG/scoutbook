/**
 * 
 */
package org.eclipse.scout.widget.shared.ui.template.formfield;

import java.util.Date;

import javax.annotation.Generated;

import org.eclipse.scout.rt.shared.data.form.fields.tablefield.AbstractTableFieldData;

/**
 * <b>NOTE:</b><br>
 * This class is auto generated by the Scout SDK. No manual modifications recommended.
 * 
 * @generated
 */
@Generated(value = "org.eclipse.scout.sdk.workspace.dto.formdata.FormDataDtoUpdateOperation", comments = "This class is auto generated by the Scout SDK. No manual modifications recommended.")
public abstract class AbstractFileTableFieldData extends AbstractTableFieldData {

  private static final long serialVersionUID = 1L;
  public static final int FILE_COLUMN_ID = 0;
  public static final int NAME_COLUMN_ID = 1;
  public static final int SIZE_COLUMN_ID = 2;
  public static final int TYPE_COLUMN_ID = 3;
  public static final int DATE_MODIFIED_COLUMN_ID = 4;
  public static final int READ_ONLY_COLUMN_ID = 5;

  public AbstractFileTableFieldData() {
  }

  public Date getDateModified(int row) {
    return (Date) getValueInternal(row, DATE_MODIFIED_COLUMN_ID);
  }

  public void setDateModified(int row, Date dateModified) {
    setValueInternal(row, DATE_MODIFIED_COLUMN_ID, dateModified);
  }

  public Object getFile(int row) {
    return getValueInternal(row, FILE_COLUMN_ID);
  }

  public void setFile(int row, Object file) {
    setValueInternal(row, FILE_COLUMN_ID, file);
  }

  public String getName(int row) {
    return (String) getValueInternal(row, NAME_COLUMN_ID);
  }

  public void setName(int row, String name) {
    setValueInternal(row, NAME_COLUMN_ID, name);
  }

  public Boolean getReadOnly(int row) {
    return (Boolean) getValueInternal(row, READ_ONLY_COLUMN_ID);
  }

  public void setReadOnly(int row, Boolean readOnly) {
    setValueInternal(row, READ_ONLY_COLUMN_ID, readOnly);
  }

  public Long getSize(int row) {
    return (Long) getValueInternal(row, SIZE_COLUMN_ID);
  }

  public void setSize(int row, Long size) {
    setValueInternal(row, SIZE_COLUMN_ID, size);
  }

  public String getType(int row) {
    return (String) getValueInternal(row, TYPE_COLUMN_ID);
  }

  public void setType(int row, String type) {
    setValueInternal(row, TYPE_COLUMN_ID, type);
  }

  @Override
  public int getColumnCount() {
    return 6;
  }

  @Override
  public Object getValueAt(int row, int column) {
    switch (column) {
      case FILE_COLUMN_ID:
        return getFile(row);
      case NAME_COLUMN_ID:
        return getName(row);
      case SIZE_COLUMN_ID:
        return getSize(row);
      case TYPE_COLUMN_ID:
        return getType(row);
      case DATE_MODIFIED_COLUMN_ID:
        return getDateModified(row);
      case READ_ONLY_COLUMN_ID:
        return getReadOnly(row);
      default:
        return null;
    }
  }

  @Override
  public void setValueAt(int row, int column, Object value) {
    switch (column) {
      case FILE_COLUMN_ID:
        setFile(row, value);
        break;
      case NAME_COLUMN_ID:
        setName(row, (String) value);
        break;
      case SIZE_COLUMN_ID:
        setSize(row, (Long) value);
        break;
      case TYPE_COLUMN_ID:
        setType(row, (String) value);
        break;
      case DATE_MODIFIED_COLUMN_ID:
        setDateModified(row, (Date) value);
        break;
      case READ_ONLY_COLUMN_ID:
        setReadOnly(row, (Boolean) value);
        break;
    }
  }
}
