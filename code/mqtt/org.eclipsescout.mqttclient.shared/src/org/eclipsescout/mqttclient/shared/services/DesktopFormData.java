/**
 * 
 */
package org.eclipsescout.mqttclient.shared.services;

import java.util.Date;
import java.util.Map;

import javax.annotation.Generated;

import org.eclipse.scout.rt.shared.data.form.AbstractFormData;
import org.eclipse.scout.rt.shared.data.form.ValidationRule;
import org.eclipse.scout.rt.shared.data.form.fields.AbstractValueFieldData;
import org.eclipse.scout.rt.shared.data.form.fields.tablefield.AbstractTableFieldData;

/**
 * <b>NOTE:</b><br>
 * This class is auto generated by the Scout SDK. No manual modifications recommended.
 * 
 * @generated
 */
@Generated(value = "org.eclipse.scout.sdk.workspace.dto.formdata.FormDataDtoUpdateOperation", comments = "This class is auto generated by the Scout SDK. No manual modifications recommended.")
public class DesktopFormData extends AbstractFormData {

  private static final long serialVersionUID = 1L;

  public DesktopFormData() {
  }

  public BrokerURL getBrokerURL() {
    return getFieldByClass(BrokerURL.class);
  }

  public CleanSession getCleanSession() {
    return getFieldByClass(CleanSession.class);
  }

  public ClientId getClientId() {
    return getFieldByClass(ClientId.class);
  }

  public ConnectionTimeout getConnectionTimeout() {
    return getFieldByClass(ConnectionTimeout.class);
  }

  public DefaultTopic getDefaultTopic() {
    return getFieldByClass(DefaultTopic.class);
  }

  public HidePassword getHidePassword() {
    return getFieldByClass(HidePassword.class);
  }

  public LwtMessage getLwtMessage() {
    return getFieldByClass(LwtMessage.class);
  }

  public LwtQoS getLwtQoS() {
    return getFieldByClass(LwtQoS.class);
  }

  public LwtRetained getLwtRetained() {
    return getFieldByClass(LwtRetained.class);
  }

  public LwtTopic getLwtTopic() {
    return getFieldByClass(LwtTopic.class);
  }

  public MaskedPassword getMaskedPassword() {
    return getFieldByClass(MaskedPassword.class);
  }

  public Message getMessage() {
    return getFieldByClass(Message.class);
  }

  public Messages getMessages() {
    return getFieldByClass(Messages.class);
  }

  public Password getPassword() {
    return getFieldByClass(Password.class);
  }

  public QoS getQoS() {
    return getFieldByClass(QoS.class);
  }

  public Retained getRetained() {
    return getFieldByClass(Retained.class);
  }

  public Status getStatus() {
    return getFieldByClass(Status.class);
  }

  public Subscriptions getSubscriptions() {
    return getFieldByClass(Subscriptions.class);
  }

  public Topic getTopic() {
    return getFieldByClass(Topic.class);
  }

  public TopicFilter getTopicFilter() {
    return getFieldByClass(TopicFilter.class);
  }

  public TopicQoS getTopicQoS() {
    return getFieldByClass(TopicQoS.class);
  }

  public UserName getUserName() {
    return getFieldByClass(UserName.class);
  }

  public static class BrokerURL extends AbstractValueFieldData<String> {

    private static final long serialVersionUID = 1L;

    public BrokerURL() {
    }

    /**
     * list of derived validation rules.
     */
    @Override
    protected void initValidationRules(Map<String, Object> ruleMap) {
      super.initValidationRules(ruleMap);
      ruleMap.put(ValidationRule.MAX_LENGTH, 4000);
    }
  }

  public static class CleanSession extends AbstractValueFieldData<Boolean> {

    private static final long serialVersionUID = 1L;

    public CleanSession() {
    }
  }

  public static class ClientId extends AbstractValueFieldData<String> {

    private static final long serialVersionUID = 1L;

    public ClientId() {
    }

    /**
     * list of derived validation rules.
     */
    @Override
    protected void initValidationRules(Map<String, Object> ruleMap) {
      super.initValidationRules(ruleMap);
      ruleMap.put(ValidationRule.MAX_LENGTH, 4000);
    }
  }

  public static class ConnectionTimeout extends AbstractValueFieldData<Integer> {

    private static final long serialVersionUID = 1L;

    public ConnectionTimeout() {
    }

    /**
     * list of derived validation rules.
     */
    @Override
    protected void initValidationRules(Map<String, Object> ruleMap) {
      super.initValidationRules(ruleMap);
      ruleMap.put(ValidationRule.MAX_VALUE, Integer.MAX_VALUE);
      ruleMap.put(ValidationRule.MIN_VALUE, Integer.MIN_VALUE);
    }
  }

  public static class DefaultTopic extends AbstractValueFieldData<String> {

    private static final long serialVersionUID = 1L;

    public DefaultTopic() {
    }

    /**
     * list of derived validation rules.
     */
    @Override
    protected void initValidationRules(Map<String, Object> ruleMap) {
      super.initValidationRules(ruleMap);
      ruleMap.put(ValidationRule.MAX_LENGTH, 4000);
    }
  }

  public static class HidePassword extends AbstractValueFieldData<Boolean> {

    private static final long serialVersionUID = 1L;

    public HidePassword() {
    }
  }

  public static class LwtMessage extends AbstractValueFieldData<String> {

    private static final long serialVersionUID = 1L;

    public LwtMessage() {
    }

    /**
     * list of derived validation rules.
     */
    @Override
    protected void initValidationRules(Map<String, Object> ruleMap) {
      super.initValidationRules(ruleMap);
      ruleMap.put(ValidationRule.MAX_LENGTH, 4000);
    }
  }

  public static class LwtQoS extends AbstractValueFieldData<Integer> {

    private static final long serialVersionUID = 1L;

    public LwtQoS() {
    }

    /**
     * list of derived validation rules.
     */
    @Override
    protected void initValidationRules(Map<String, Object> ruleMap) {
      super.initValidationRules(ruleMap);
      ruleMap.put(ValidationRule.MAX_VALUE, Integer.MAX_VALUE);
      ruleMap.put(ValidationRule.MIN_VALUE, Integer.MIN_VALUE);
    }
  }

  public static class LwtRetained extends AbstractValueFieldData<Boolean> {

    private static final long serialVersionUID = 1L;

    public LwtRetained() {
    }
  }

  public static class LwtTopic extends AbstractValueFieldData<String> {

    private static final long serialVersionUID = 1L;

    public LwtTopic() {
    }

    /**
     * list of derived validation rules.
     */
    @Override
    protected void initValidationRules(Map<String, Object> ruleMap) {
      super.initValidationRules(ruleMap);
      ruleMap.put(ValidationRule.MAX_LENGTH, 4000);
    }
  }

  public static class MaskedPassword extends AbstractValueFieldData<String> {

    private static final long serialVersionUID = 1L;

    public MaskedPassword() {
    }

    /**
     * list of derived validation rules.
     */
    @Override
    protected void initValidationRules(Map<String, Object> ruleMap) {
      super.initValidationRules(ruleMap);
      ruleMap.put(ValidationRule.MAX_LENGTH, 4000);
    }
  }

  public static class Message extends AbstractValueFieldData<String> {

    private static final long serialVersionUID = 1L;

    public Message() {
    }

    /**
     * list of derived validation rules.
     */
    @Override
    protected void initValidationRules(Map<String, Object> ruleMap) {
      super.initValidationRules(ruleMap);
      ruleMap.put(ValidationRule.MAX_LENGTH, 4000);
    }
  }

  public static class Messages extends AbstractTableFieldData {

    private static final long serialVersionUID = 1L;
    public static final int MESSAGE_COLUMN_ID = 0;
    public static final int TOPIC_COLUMN_ID = 1;
    public static final int RECEIVED_COLUMN_ID = 2;
    public static final int QO_S_COLUMN_ID = 3;
    public static final int RETAINED_COLUMN_ID = 4;

    public Messages() {
    }

    public String getMessage(int row) {
      return (String) getValueInternal(row, MESSAGE_COLUMN_ID);
    }

    public void setMessage(int row, String message) {
      setValueInternal(row, MESSAGE_COLUMN_ID, message);
    }

    public Integer getQoS(int row) {
      return (Integer) getValueInternal(row, QO_S_COLUMN_ID);
    }

    public void setQoS(int row, Integer qoS) {
      setValueInternal(row, QO_S_COLUMN_ID, qoS);
    }

    public Date getReceived(int row) {
      return (Date) getValueInternal(row, RECEIVED_COLUMN_ID);
    }

    public void setReceived(int row, Date received) {
      setValueInternal(row, RECEIVED_COLUMN_ID, received);
    }

    public Boolean getRetained(int row) {
      return (Boolean) getValueInternal(row, RETAINED_COLUMN_ID);
    }

    public void setRetained(int row, Boolean retained) {
      setValueInternal(row, RETAINED_COLUMN_ID, retained);
    }

    public String getTopic(int row) {
      return (String) getValueInternal(row, TOPIC_COLUMN_ID);
    }

    public void setTopic(int row, String topic) {
      setValueInternal(row, TOPIC_COLUMN_ID, topic);
    }

    @Override
    public int getColumnCount() {
      return 5;
    }

    @Override
    public Object getValueAt(int row, int column) {
      switch (column) {
        case MESSAGE_COLUMN_ID:
          return getMessage(row);
        case TOPIC_COLUMN_ID:
          return getTopic(row);
        case RECEIVED_COLUMN_ID:
          return getReceived(row);
        case QO_S_COLUMN_ID:
          return getQoS(row);
        case RETAINED_COLUMN_ID:
          return getRetained(row);
        default:
          return null;
      }
    }

    @Override
    public void setValueAt(int row, int column, Object value) {
      switch (column) {
        case MESSAGE_COLUMN_ID:
          setMessage(row, (String) value);
          break;
        case TOPIC_COLUMN_ID:
          setTopic(row, (String) value);
          break;
        case RECEIVED_COLUMN_ID:
          setReceived(row, (Date) value);
          break;
        case QO_S_COLUMN_ID:
          setQoS(row, (Integer) value);
          break;
        case RETAINED_COLUMN_ID:
          setRetained(row, (Boolean) value);
          break;
      }
    }
  }

  public static class Password extends AbstractValueFieldData<String> {

    private static final long serialVersionUID = 1L;

    public Password() {
    }

    /**
     * list of derived validation rules.
     */
    @Override
    protected void initValidationRules(Map<String, Object> ruleMap) {
      super.initValidationRules(ruleMap);
      ruleMap.put(ValidationRule.MAX_LENGTH, 4000);
    }
  }

  public static class QoS extends AbstractValueFieldData<Integer> {

    private static final long serialVersionUID = 1L;

    public QoS() {
    }

    /**
     * list of derived validation rules.
     */
    @Override
    protected void initValidationRules(Map<String, Object> ruleMap) {
      super.initValidationRules(ruleMap);
      ruleMap.put(ValidationRule.MAX_VALUE, 2);
      ruleMap.put(ValidationRule.MIN_VALUE, 0);
    }
  }

  public static class Retained extends AbstractValueFieldData<Boolean> {

    private static final long serialVersionUID = 1L;

    public Retained() {
    }
  }

  public static class Status extends AbstractValueFieldData<String> {

    private static final long serialVersionUID = 1L;

    public Status() {
    }

    /**
     * list of derived validation rules.
     */
    @Override
    protected void initValidationRules(Map<String, Object> ruleMap) {
      super.initValidationRules(ruleMap);
      ruleMap.put(ValidationRule.MAX_LENGTH, 4000);
    }
  }

  public static class Subscriptions extends AbstractTableFieldData {

    private static final long serialVersionUID = 1L;
    public static final int TOPIC_FILTER_COLUMN_ID = 0;
    public static final int QO_S_COLUMN_ID = 1;

    public Subscriptions() {
    }

    public Integer getQoS(int row) {
      return (Integer) getValueInternal(row, QO_S_COLUMN_ID);
    }

    public void setQoS(int row, Integer qoS) {
      setValueInternal(row, QO_S_COLUMN_ID, qoS);
    }

    public String getTopicFilter(int row) {
      return (String) getValueInternal(row, TOPIC_FILTER_COLUMN_ID);
    }

    public void setTopicFilter(int row, String topicFilter) {
      setValueInternal(row, TOPIC_FILTER_COLUMN_ID, topicFilter);
    }

    @Override
    public int getColumnCount() {
      return 2;
    }

    @Override
    public Object getValueAt(int row, int column) {
      switch (column) {
        case TOPIC_FILTER_COLUMN_ID:
          return getTopicFilter(row);
        case QO_S_COLUMN_ID:
          return getQoS(row);
        default:
          return null;
      }
    }

    @Override
    public void setValueAt(int row, int column, Object value) {
      switch (column) {
        case TOPIC_FILTER_COLUMN_ID:
          setTopicFilter(row, (String) value);
          break;
        case QO_S_COLUMN_ID:
          setQoS(row, (Integer) value);
          break;
      }
    }
  }

  public static class Topic extends AbstractValueFieldData<String> {

    private static final long serialVersionUID = 1L;

    public Topic() {
    }

    /**
     * list of derived validation rules.
     */
    @Override
    protected void initValidationRules(Map<String, Object> ruleMap) {
      super.initValidationRules(ruleMap);
      ruleMap.put(ValidationRule.MAX_LENGTH, 4000);
    }
  }

  public static class TopicFilter extends AbstractValueFieldData<String> {

    private static final long serialVersionUID = 1L;

    public TopicFilter() {
    }

    /**
     * list of derived validation rules.
     */
    @Override
    protected void initValidationRules(Map<String, Object> ruleMap) {
      super.initValidationRules(ruleMap);
      ruleMap.put(ValidationRule.MAX_LENGTH, 4000);
    }
  }

  public static class TopicQoS extends AbstractValueFieldData<Integer> {

    private static final long serialVersionUID = 1L;

    public TopicQoS() {
    }

    /**
     * list of derived validation rules.
     */
    @Override
    protected void initValidationRules(Map<String, Object> ruleMap) {
      super.initValidationRules(ruleMap);
      ruleMap.put(ValidationRule.MAX_VALUE, 2);
      ruleMap.put(ValidationRule.MIN_VALUE, 0);
    }
  }

  public static class UserName extends AbstractValueFieldData<String> {

    private static final long serialVersionUID = 1L;

    public UserName() {
    }

    /**
     * list of derived validation rules.
     */
    @Override
    protected void initValidationRules(Map<String, Object> ruleMap) {
      super.initValidationRules(ruleMap);
      ruleMap.put(ValidationRule.MAX_LENGTH, 4000);
    }
  }
}
